#!/usr/local/bin/python3
# -*- coding: utf-8 -*-

# System packages
import sys
import json
import os
import inspect

# Qt packages
from PyQt5.QtWidgets import (QMainWindow, QApplication, QPushButton, QWidget,
	QAction, QTabWidget, QVBoxLayout, QLabel, QLineEdit, QGridLayout,
	QFileDialog, QMessageBox)
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot

# Cryptography packages
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.asymmetric import utils

# Autogenerated package
import mainwindow_gui_auto

#######################################################################
# Constant declaration
#######################################################################
CURRENT_DIR = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) + '/'
WINDOWS_TITLE = "STYL Key Management"

def generateECKey(keyname, keypass=""):
	private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())

	if keypass == "":
		serialized_private = private_key.private_bytes(
				encoding=serialization.Encoding.PEM,
				format=serialization.PrivateFormat.PKCS8,
				# encryption_algorithm=serialization.BestAvailableEncryption(b'1234')
				encryption_algorithm=serialization.NoEncryption()
			)
	else:
		serialized_private = private_key.private_bytes(
				encoding=serialization.Encoding.PEM,
				format=serialization.PrivateFormat.PKCS8,
				encryption_algorithm=serialization.BestAvailableEncryption(str.encode(keypass))
			)

	if not(keyname.endswith('.pem')):
		keyname += '.pem'

	with open(keyname, "wb") as f:
		f.write(serialized_private)

	return keyname

def msgBoxInfo(title, message):
	msg = QMessageBox()
	msg.setWindowTitle(title)
	msg.setIcon(QMessageBox.Information)
	msg.setText(message)
	msg.setStandardButtons(QMessageBox.Ok)
	msg.exec_()

def msgBoxError(title, message, informative="", detail=""):
	msg = QMessageBox()
	msg.setIcon(QMessageBox.Critical)
	msg.setText(message)
	msg.setInformativeText(informative)
	msg.setWindowTitle(title)
	if detail != "":
		msg.setDetailedText(detail)
	msg.setStandardButtons(QMessageBox.Ok)
	msg.exec_()

class programSettings(dict):
	# Override init function.
	def __init__(self, console=None):
		# Call super class init function.
		dict.__init__(self)
		self.console = console

	def ReadFile(self, filename=None):
		if filename==None:
			filename = '.config.json'
		try:
			# Open file.
			with open(filename, 'r') as f:
				file_content = f.read()
				file_content.strip()
				file_settings = json.loads(file_content)
				for setting in file_settings:
					self[setting] = file_settings[setting]
		except IOError:
			if self.console != None:
				self.console.addLine("No settings file found. Using defaults.")

	def AbsoluteImagePath(self, filename):
		return CURRENT_DIR + self['IMAGE_DIR'] + filename

class ButtonPathChoose(QPushButton):

	def __init__(self, *args, **kwargs):
		QPushButton.__init__(self, *args, **kwargs)
		self.edit = None

	def SetEditWidget(self, edit_object):
		self.edit = edit_object

	def GetEditWidget(self):
		return self.edit

class MainGui(mainwindow_gui_auto.Ui_MainWindow):

	def __init__(self, MainWindow):
		self.settings = programSettings()
		self.settings.ReadFile('.config.json')

		# Let the autogenerate script init the UI
		self.setupUi(MainWindow)

		# Manual change the UI settings
		self.MainWindow = MainWindow
		self.MainWindow.setWindowTitle(WINDOWS_TITLE)

		self.initHandler()

	def initHandler(self):
		self.btnSignFirmware.clicked.connect(self.signFirmware)
		self.btnSignChooseFirmwarePath.clicked.connect(self.showFileDialog)
		self.btnSignChoosePrivateKeyPath.clicked.connect(self.showFileDialog)
		self.btnGenKeys.clicked.connect(self.generateKey)

	def generateKey(self):
		# validate the input
		if self.editPriKeyPassphrase.text() != self.editPriKeyPassphraseConfirm.text():
			msgBoxError("Error", "Input error:", "Password mismatch")
			return
		if self.editPriKeyName == "":
			msgBoxError("Error", "Input error:", "Private key name is required")
			return

		# generate the key
		try:
			keyname = generateECKey(str(self.editPriKeyName.text()), str(self.editPriKeyPassphrase.text()))
		except Exception as inst:
			print(sys.exc_info()[0])
			print(type(inst))
			print(type(str(inst)))
			msgBoxError("Error", "Key generate error:", str(inst))
			return

		# response to UI
		msgBoxInfo("Success", 'Private key "%s" successfully generated' % keyname)
		return

	def signFirmware(self):
		# validate the input
		if not(os.path.isfile(self.editSignKeyPath.text())):
			msgBoxError("Error", 'Private key "%s" not found' % self.editSignKeyPath.text())
			return

		if not(os.path.isfile(self.editFirmwarePath.text())):
			msgBoxError("Error", 'Firmware "%s" not found' % self.editFirmwarePath.text())
			return

		# sign the firmware

		# response to UI
		msgBoxInfo("Success", 'Firmware "%s" successfully signed' % self.editFirmwarePath.text())
		return

	def showFileDialog(self):
		button_editline_maping = {
			self.btnSignChooseFirmwarePath: self.editPriKeyName,
			self.btnSignChoosePrivateKeyPath: self.editSignKeyPath
		}
		sending_button = self.MainWindow.sender()
		fname = QFileDialog.getOpenFileName(self.MainWindow, 'Open file', './')

		if not(sending_button in button_editline_maping):
			return

		if fname[0]:
			edit_widget = button_editline_maping[sending_button]
			edit_widget.setText(fname[0])
			print (fname)

	def AboutWindow(self):
		return

def main():
	app = QApplication(sys.argv)
	MainWindow = QMainWindow()
	auto_ui = MainGui(MainWindow)
	MainWindow.show()
	sys.exit(app.exec_())

def main_test():
	app = QApplication(sys.argv)
	MainWindow = QMainWindow()
	ui = mainwindow_gui_auto.Ui_MainWindow()
	ui.setupUi(MainWindow)
	MainWindow.show()
	sys.exit(app.exec_())

if __name__ == '__main__':
	main()
	# main_test()

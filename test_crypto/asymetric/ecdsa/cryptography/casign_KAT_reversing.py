#!/usr/bin/python
# -*- coding: utf-8 -*-

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.asymmetric import utils
import sys

sys.path.insert(0, '../../../../test_bluefinserial/bluefinserial')
from utils import *

# This function calculate BigInt from list of bytes, Big Endian order
def CalculateBigInt(bytes_list):
	ret = 0
	max_idx = len(bytes_list) - 1
	idx = 0
	for val in bytes_list:
		ret += val << 8*(max_idx - idx)
		idx += 1
	return ret

#######################################################################
# Constant declaration
#######################################################################
MSG = "abc"

r_KAT_signature = [
	0xCB, 0x28, 0xE0, 0x99, 0x9B, 0x9C, 0x77, 0x15,
	0xFD, 0x0A, 0x80, 0xD8, 0xE4, 0x7A, 0x77, 0x07,
	0x97, 0x16, 0xCB, 0xBF, 0x91, 0x7D, 0xD7, 0x2E,
	0x97, 0x56, 0x6E, 0xA1, 0xC0, 0x66, 0x95, 0x7C,
]

s_KAT_signature = [
	0x86, 0xFA, 0x3B, 0xB4, 0xE2, 0x6C, 0xAD, 0x5B,
	0xF9, 0x0B, 0x7F, 0x81, 0x89, 0x92, 0x56, 0xCE,
	0x75, 0x94, 0xBB, 0x1E, 0xA0, 0xC8, 0x92, 0x12,
	0x74, 0x8B, 0xFF, 0x3B, 0x3D, 0x5B, 0x03, 0x15,
]

x_pubkey = [
	0x24, 0x42, 0xA5, 0xCC, 0x0E, 0xCD, 0x01, 0x5F,
	0xA3, 0xCA, 0x31, 0xDC, 0x8E, 0x2B, 0xBC, 0x70,
	0xBF, 0x42, 0xD6, 0x0C, 0xBC, 0xA2, 0x00, 0x85,
	0xE0, 0x82, 0x2C, 0xB0, 0x42, 0x35, 0xE9, 0x70,
]

y_pubkey = [
	0x6F, 0xC9, 0x8B, 0xD7, 0xE5, 0x02, 0x11, 0xA4,
	0xA2, 0x71, 0x02, 0xFA, 0x35, 0x49, 0xDF, 0x79,
	0xEB, 0xCB, 0x4B, 0xF2, 0x46, 0xB8, 0x09, 0x45,
	0xCD, 0xDF, 0xE7, 0xD5, 0x09, 0xBB, 0xFD, 0x7D,
]


#######################################################################
# Generate public key from list of bytes of x,y coordinate
#######################################################################
public_number = ec.EllipticCurvePublicNumbers(
	CalculateBigInt(x_pubkey),
	CalculateBigInt(y_pubkey),
	ec.SECP256R1()
	)

public_key = public_number.public_key(default_backend())


#######################################################################
# Verify signature with by the public key
#######################################################################
signature = utils.encode_dss_signature(
	CalculateBigInt(r_KAT_signature),
	CalculateBigInt(s_KAT_signature)
	)

print("Verify status: ", public_key.verify(signature, MSG, ec.ECDSA(hashes.SHA256())))

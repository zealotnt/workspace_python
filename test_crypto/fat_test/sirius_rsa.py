#!/usr/bin/python
# -*- coding: utf-8 -*-
# @Author: zealotnt
# @Date:   2017-05-14 23:34:45

# ---- IMPORTS
import re
import time
import serial
import struct
import sys
import git
import os
import inspect
from optparse import OptionParser, OptionGroup
def get_git_root():
	CURRENT_DIR = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) + os.sep
	path = CURRENT_DIR
	git_repo = git.Repo(path, search_parent_directories=True)
	git_root = git_repo.git.rev_parse("--show-toplevel")
	return git_root
sys.path.insert(0, get_git_root() + '/test_bluefinserial/bluefinserial')
from utils import *
from datalink_deliver import *
from scan import scan
from utils import *
from sirius_api_crypto import *


from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from Crypto.PublicKey import RSA

# Constants
VALID_TARGET = ["RF", "APP"]

def Test_AutogenerateData(sirius_crypto, options):
	# KEY_SIZE = [512, 1024, 2048, 3072]
	KEY_SIZE = [512, 1024, 2048]

	for idx, keySize in enumerate(KEY_SIZE):
		# print the head of resulr
		err = False
		print("")
		print_ok(">"*40)
		print_ok("Test RSA with keylength = %d" % keySize)
		#######################################
		# Key generation
		private_key = rsa.generate_private_key(public_exponent=65537, key_size=keySize, backend=default_backend())
		public_key = private_key.public_key()

		#######################################
		# Key download
		rsa_n = packl_ctypes(private_key.private_numbers().public_numbers.n)
		rsa_d = packl_ctypes(private_key.private_numbers().d)
		rsa_p = packl_ctypes(private_key.private_numbers().p)
		rsa_q = packl_ctypes(private_key.private_numbers().q)
		rsa_e = private_key.private_numbers().public_numbers.e
		rsa_n = FixedBytes(keySize/8, rsa_n)
		rsa_d = FixedBytes(keySize/8, rsa_d)
		rsa_p = FixedBytes(keySize/8, rsa_p)
		rsa_q = FixedBytes(keySize/8, rsa_q)

		if options.debug >= 2:
			dump_hex(rsa_n, "rsa_n_%s   : " % (keySize))
			dump_hex(rsa_d, "rsa_d_%s   : " % (keySize))

		sirius_crypto.KeyDownload(target=options.target, RSA_n=rsa_n, RSA_d=rsa_d, RSA_e=rsa_e)

		#######################################
		# Doing with rsa
		# encrypt with sirius
		plain_input = FixedBytes(keySize/8, options.message)
		ciphered = sirius_crypto.Rsa(options.target, "ENC", plain_input)
		ciphered = FixedBytes(keySize/8, ciphered)

		# encrypt with native, the compare it with sirius
		pubkey_tup = (private_key.private_numbers().public_numbers.n, long(private_key.private_numbers().public_numbers.e))
		puc_key_2ndframework = RSA.construct(pubkey_tup)
		cipher_cal = puc_key_2ndframework.encrypt(plain_input, keySize)
		cipher_cal = cipher_cal[0]
		if ciphered != cipher_cal:
			print_err("ciphered != cipher_cal")
			dump_hex(ciphered,   "ciphered  : ")
			dump_hex(cipher_cal, "cipher_cal: ")
			err = True
		else:
			print_ok("cipher_sirius compare with cipher_cal: pass")
			if options.debug >= 2:
				dump_hex(ciphered,   "ciphered  : ")

		# decrypt with sirius
		sirius_crypto.KeyDownload(target=options.target, RSA_n=rsa_n, RSA_d=rsa_d, RSA_e=rsa_e)
		plain_ret = sirius_crypto.Rsa(options.target, "DEC", ciphered)
		plain_ret = FixedBytes(keySize/8, plain_ret)

		# print result
		if plain_ret == plain_input:
			print_ok("Check the plaintext_dec return from board, with our plaintext_input: pass")
		else:
			print_err("Check the plaintext_dec return from board, with our plaintext_input: fail")
			dump_hex(plain_ret,   "plain_ret  : ")
			dump_hex(plain_input, "plain_input: ")
			err = True
		if options.debug >= 1 and err == False:
			dump_hex(ciphered,    "ciphered   : ")
			dump_hex(plain_ret,   "plain_ret  : ")
			dump_hex(plain_input, "plain_input: ")
		print_ok("<"*40)
		print("")

def Test_RSADP(sirius_crypto, options):
	if options.target != "APP":
		print_err("Only app supprt RSADP test vectors")
		return

	test_0 = {
		"name": "test_0",
		"keysize": 1024,
		"n" : 0xd0b750c8554b64c7a9d34d068e020fb52fea1b39c47971a359f0eec5da0437ea3fc94597d8dbff5444f6ce5a3293ac89b1eebb3f712b3ad6a06386e6401985e19898715b1ea32ac03456fe1796d31ed4af389f4f675c23c421a125491e740fdac4322ec2d46ec945ddc349227b492191c9049145fb2f8c2998c486a840eac4d3,
		"e" : 0x859e499b8a186c8ee6196954170eb8068593f0d764150a6d2e5d3fea7d9d0d33ac553eecd5c3f27a310115d283e49377820195c8e67781b6f112a625b14b747fa4cc13d06eba0917246c775f5c732865701ae9349ea8729cde0bbade38204e63359a46e672a8d0a2fd530069,
		"d" : 0x27b7119a09edb827c13418c820b522a1ee08de0e4bb28106db6bb91498a3b361ab293af83fefcdd8a6bd2134ca4afacf64a0e33c014f48f47530f8847cc9185cbedec0d9238c8f1d5498f71c7c0cff48dc213421742e34350ca94007753cc0e5a783264cf49ff644ffea94253cfe86859acd2a2276ca4e7215f8ebaa2f188f51,
		"c" : 0x6cf87c6a65925df6719eef5f1262edc6f8a0a0a0d21c535c64580745d9a268a95b50ff3be24ba8b649ca47c3a760b71ddc3903f36aa1d98e87c53b3370be784bffcb5bc180dea2acc15bb12e681c889b89b8f3de78050019dcdbb68c051b04b880f0f8c4e855321ffed89767fc9d4a8a27a5d82ba450b2478c21e11843c2f539,
		"Result" : "Pass",
		"k" : 0x5c7bce723cf4da053e503147242c60678c67e8c22467f0336b6d5c31f14088cb3d6cefb648db132cb32e95092f3d9bcd1cab51e68bd3a892ab359cdff556785ae06708633d39a0618f9d6d70f6bdeb6b777e7dd9acc41f19560c71a68479c8a07b14fb9a4c765fd292ae56dd2f2143b62649cc70fb604fdc5cc1ade6e29de235,
	}

	TEST_CASES = [test_0]

	for testCase in TEST_CASES:
		# Convert from bignum to string byte array
		rsa_n = packl_ctypes(testCase["n"])
		rsa_d = packl_ctypes(testCase["d"])
		rsa_e = packl_ctypes(testCase["e"])
		rsa_n = FixedBytes(testCase["keysize"]/8, rsa_n)
		rsa_d = FixedBytes(testCase["keysize"]/8, rsa_d)
		rsa_e = FixedBytes(testCase["keysize"]/8, rsa_e)

		KAT_rsa_cipher = packl_ctypes(testCase["c"])
		KAT_rsa_plain = packl_ctypes(testCase["k"])

		sirius_crypto.KeyDownload(target=options.target, RSA_n=rsa_n, RSA_d=rsa_d, RSA_e=rsa_e)
		self_ciphered = sirius_crypto.Rsa(options.target, "ENC", KAT_rsa_plain)

		sirius_crypto.KeyDownload(target=options.target, RSA_n=rsa_n, RSA_d=rsa_d, RSA_e=rsa_e)
		self_plain = sirius_crypto.Rsa(options.target, "DEC", KAT_rsa_cipher)

		if self_plain != KAT_rsa_plain:
			print_err ("Test case %s fail" % testCase["name"])
			dump_hex(self_plain,     "plain_self  : ")
			dump_hex(KAT_rsa_plain,  "plain_kat   : ")
			continue
		if self_ciphered != KAT_rsa_cipher:
			print_err ("Test case %s fail" % testCase["name"])
			dump_hex(self_ciphered,   "ciphered_self  : ")
			dump_hex(KAT_rsa_cipher,  "ciphered_kat   : ")
			continue
		print_ok ("Test case %s pass" % testCase["name"])

def main():
	parser = OptionParser()
	parser.add_option(  "-s", "--serial",
						dest="serial",
						type="string",
						default=BLUEFINSERIAL_DEFAULT_SERIAL_PORT,
						help="define the serial port to use")
	parser.add_option(  "-b", "--baud",
						dest="baud",
						type="string",
						default=BLUEFINSERIAL_BAUDRATE,
						help="define the serial baudrate to use")
	parser.add_option(  "-t", "--target",
						dest="target",
						default="APP",
						help="Choose type of target to send serial API to, any of: %s" % ', '.join(VALID_TARGET))
	parser.add_option(  "-m", "--message",
						dest="message",
						default=os.urandom(63),
						help="the input message to be hashed")
	parser.add_option(  "-d", "--debug",
						dest="debug",
						default=0,
						action="count",
						help="Make the script more verbose")
	(options, args) = parser.parse_args()

	# Init the com port
	try:
		comm = BluefinserialSend(options.serial, options.baud)
	except Exception, e:
		print e
		parser.print_help()
		sys.exit(-1)
	print_ok("Use " + options.serial + " with baudrate = " + str(options.baud))

	sirius_crypto = SiriusAPICrypto(comm)

	# Test_AutogenerateData(sirius_crypto, options)
	Test_RSADP(sirius_crypto, options)

if __name__ == "__main__":
	main()
